# -*- coding: utf-8 -*-
"""AnicrushExtraDetails.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13MJ8Q1ztsdlVptFss0_2nKQxqswddWoH
"""

#!pip install requests
#!pip install boto3

import requests
import pandas as pd
from pandas import json_normalize
import boto3

class AnicrushExtraDetail:
  mostFavouritetAnimeListUrl = "https://api.anicrush.to/shared/v2/movie/mostFavorite?type=home"
  topAiringtAnimeListUrl = "https://api.anicrush.to/shared/v2/movie/topAiring?type=home"
  spotLightAnimeListUrl = "https://api.anicrush.to/shared/v2/movie/spotlight"
  trendingAnimeListUrl = "https://api.anicrush.to/shared/v2/movie/trending"
  topViewedAnimeListUrl="https://api.anicrush.to/v1/movie/topViewed"
  headers = {
        'Accept': 'application/json, text/plain, */*',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
        'Referer': 'https://anicrush.to/',
        'Access-Control-Allow-Origin':'*',
        'Sec-Ch-Ua' : "\"Google Chrome\";v=\"123\", \"Not:A-Brand\";v=\"8\", \"Chromium\";v=\"123\"",
        'Sec-Ch-Ua-Mobile':'?0',
        'Sec-Ch-Ua-Platform':"Windows",
        'X-Site':'anicrush'
          }
  s3=boto3.resource(
    service_name='s3',
    region_name='ap-south-1',
    aws_access_key_id='AKIAW3MEFXW7FMKXZGXR',
    aws_secret_access_key='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'
    )
  s3_client= boto3.client('s3',
                        region_name='ap-south-1',
                        aws_access_key_id='AKIAW3MEFXW7FMKXZGXR',
                        aws_secret_access_key='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')

  def getAnimeIdsFromAnimeAPIResponse(self,animeList):
    idList=""
    animeListDf=json_normalize(animeList)
    if 'id' in animeListDf:
      idList=','.join(animeListDf['id'].values.tolist())
    return idList

  def getAnimeMalIdsFromAnimeAPIResponse(self,animeList):
    malIdList=""
    animeListDf=json_normalize(animeList)
    if 'mal_id' in animeListDf:
      malIdList=','.join(str(malID) for malID in animeListDf['mal_id'].values.tolist())
    return malIdList

  def checkResultsExist(self,response):
    if 'result' in response:
      return True
    else:
      return False

  def check_file_exists_in_s3(self,bucket_name, key):
    try:
      self.s3_client.head_object(Bucket=bucket_name, Key=key)
      return True
    except Exception as e:
      print(f"Error checking if file exists in S3: {e}")
      return False

  def upload_in_s3_bucket(self,dataframe):
    df=pd.DataFrame()
    if self.check_file_exists_in_s3('anicrushdatas','AnimeListExtraDetailFromAnicrush.csv'):
      response=self.s3_client.get_object(Bucket='anicrushdatas', Key='AnimeListExtraDetailFromAnicrush.csv')
      df = pd.read_csv(response['Body'])
    df=pd.concat([df, dataframe], ignore_index=True)
    df.to_csv('AnimeListExtraDetailFromAnicrush.csv', index=False, encoding='utf-8')
    self.s3.Bucket('anicrushdatas').upload_file(Filename='AnimeListExtraDetailFromAnicrush.csv',Key='AnimeListExtraDetailFromAnicrush.csv')


  def start_And_upload(self):
    mostFavouritetAnimeResponse = requests.get(self.mostFavouritetAnimeListUrl, headers=self.headers).json()
    topAiringtAnimeResponse = requests.get(self.topAiringtAnimeListUrl, headers=self.headers).json()
    spotLightAnimeResponse = requests.get(self.spotLightAnimeListUrl, headers=self.headers).json()
    trendingAnimeResponse = requests.get(self.trendingAnimeListUrl, headers=self.headers).json()
    topViewedAnimeResponse = requests.get(self.topViewedAnimeListUrl, headers=self.headers).json()


    datas= [ (self.getAnimeIdsFromAnimeAPIResponse(mostFavouritetAnimeResponse['result']) if self.checkResultsExist(mostFavouritetAnimeResponse) else None),
        (self.getAnimeMalIdsFromAnimeAPIResponse(mostFavouritetAnimeResponse['result']) if self.checkResultsExist(mostFavouritetAnimeResponse)  else None),
        self.getAnimeIdsFromAnimeAPIResponse(topAiringtAnimeResponse['result']) if self.checkResultsExist(topAiringtAnimeResponse)  else None,
        self.getAnimeMalIdsFromAnimeAPIResponse(topAiringtAnimeResponse['result']) if self.checkResultsExist(topAiringtAnimeResponse)  else None,

        self.getAnimeIdsFromAnimeAPIResponse(spotLightAnimeResponse['result']) if self.checkResultsExist(spotLightAnimeResponse) else None,
        self.getAnimeIdsFromAnimeAPIResponse(trendingAnimeResponse['result']) if self.checkResultsExist(trendingAnimeResponse) else None,

         self.getAnimeIdsFromAnimeAPIResponse(topViewedAnimeResponse['result']['topViewedDay']) if self.checkResultsExist(topViewedAnimeResponse) else None,
          self.getAnimeIdsFromAnimeAPIResponse(topViewedAnimeResponse['result']['topViewedMonth']) if self.checkResultsExist(topViewedAnimeResponse) else None,
          self.getAnimeIdsFromAnimeAPIResponse(topViewedAnimeResponse['result']['topViewedWeek']) if self.checkResultsExist(topViewedAnimeResponse) else None,
           ]
    animeExtraDetailsDf= pd.DataFrame([datas],columns=['most_Favourite_Anime_id','most_Favourite_Anime_mal_id','top_Airing_Anime_id',
                                                   'top_Airing_Anime_mal_id','spot_Light_Anime_id','trending_Anime_id','top_Viewed_Anime_Daily_id',
                                                   'top_Viewed_Anime_Monthly_id','top_Viewed_Anime_weekly_id'])

    self.upload_in_s3_bucket(animeExtraDetailsDf)


r=AnicrushExtraDetail()
r.start_And_upload()